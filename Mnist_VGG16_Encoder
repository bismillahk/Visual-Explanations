# Dimensions Expansion to 3d
x_train = np.expand_dims(x_train, axis=-1)
y_train = np.expand_dims(y_train, axis=-1)
x_test  = np.expand_dims(x_test, axis=-1)
y_test  = np.expand_dims(y_test, axis=-1)

x_train = np.repeat(x_train, 3, axis=-1)
x_test  = np.repeat(x_test, 3, axis=-1)

x_train =  x_train/255
x_test  = x_test/255

#seperating each digit
#x_train_digits, y_train_digits = seperate_digits(x_train, y_train)


y_train = LabelBinarizer().fit_transform(y_train)
y_test = LabelBinarizer().fit_transform(y_test)
x_train = tf.image.resize(x_train, [32,32])
x_test = tf.image.resize(x_test, [32,32])
print('Train: X=%s, y=%s' % (x_train.shape, y_train.shape))
print('Test: X=%s, y=%s' % (x_test.shape, y_test.shape))

vgg = VGG16(weights='imagenet',include_top = False,input_shape=(32,32,3))

base_model = tf.keras.Model(vgg.input,vgg.layers[-2].output)

x =  MaxPooling2D()(base_model.output)
mean_fmap = GlobalAveragePooling2D()(x)
dropout = tf.keras.layers.Dropout(0.5)(mean_fmap)
out = Dense(10,activation='softmax')(dropout)

classifier = tf.keras.Model(inputs=[base_model.input], outputs= [out],name='base_model')

classifier.compile(optimizer=optimizers.SGD(learning_rate=0.001/10, momentum = 0.9), 
                  loss=['categorical_crossentropy'], 
                  metrics=['accuracy'])

#classifier.fit(x_train, y_train, batch_size =16, epochs=10, validation_data= [x_test,y_test])
#classifier.save_weights('mnist_classifier_weights_epoch10.h5')

classifier.load_weights('/content/drive/MyDrive/ResearchWork/CFE/Mnist_explanation/mnist_classifier_weights_epoch10.h5')


classifier_encoder = keras.Model(classifier.input, classifier.layers[-4].output)
classifier_encoder.trainable = False
#classifier_encoder.summary()

#Decoder 
decoder_input= keras.Input(shape=classifier.layers[-4].output.shape[1:])

x = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name = 'conv6_1')(decoder_input)
x = UpSampling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation = 'relu', padding = 'same', name = 'conv6_2')(x)

x = UpSampling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation = 'relu', padding = 'same', name = 'conv7_1')(x)

x = UpSampling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation = 'relu', padding = 'same', name = 'conv7_3')(x)
                          
x = UpSampling2D((2, 2))(x)
x = Conv2D(64, (3, 3), activation = 'relu', padding = 'same', name = 'conv8_1')(x)
                                             
x = UpSampling2D((2, 2))(x) 
decoded = Conv2D(3, (3, 3), activation = None, padding = 'same', name = 'conv9_1')(x)
                                            
decoder = keras.Model(decoder_input, decoded, name='Decoder')
#decoder.summary()

#AUTOENCODER
auto_input = keras.Input(shape=(32,32,3))
encoded = classifier_encoder(auto_input)
decoded = decoder(encoded)

autoencoder = keras.Model(auto_input, decoded, name='auto_encoder')
#autoencoder.summary()

predicted = autoencoder.predict(x_test)


n=10
plt.figure(figsize=(15, 2))
for i in range(10):
  ax = plt.subplot(2, n, i + 1)
  x_test_resized = tf.image.resize(x_test[i], [28,28], method = 'gaussian')
  #x = x_test[i]
  x_test_resized_gray = x_test_resized[:,:,0]
  
  plt.imshow(x_test_resized_gray, cmap=plt.get_cmap('gray'))
  path = '/content/drive/MyDrive/ResearchWork/CFE/Mnist_explanation/x_test_image'+ str(i)+'.png'
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
  plt.savefig(path)

  ax = plt.subplot(2, n, i + 1 + n)
  x_predicted_resized = tf.image.resize(predicted[i], [28,28], method = 'gaussian')
  x_predicted_resized_gray = x_test_resized[:,:,0]

  
  plt.imshow(x_predicted_resized_gray, cmap=plt.get_cmap('gray'))
  path = '/content/drive/MyDrive/ResearchWork/CFE/Mnist_explanation/x_test_predicted_image'+ str(i)+'.png'
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
  plt.savefig(path)
